// Generated by CoffeeScript 2.4.1
var Ball, COLORS, active, balls, clicked, createColors, createPair, draw, level, mousePressed, overlap, reset, setup;

COLORS = null;

level = 0;

active = 0;

clicked = [];

Ball = class Ball {
  constructor(radie1, x1, y1, col1) {
    this.radie = radie1;
    this.x = x1;
    this.y = y1;
    this.col = col1;
    this.active = true;
  }

  rita() {
    if (!this.active) {
      return;
    }
    sc(1);
    sw(4);
    fill(this.col);
    return circle(this.x, this.y, this.radie);
  }

  inside(mx, my) {
    if (!this.active) {
      return false;
    }
    return dist(this.x, this.y, mx, my) < this.radie;
  }

};

balls = [];

reset = function(delta = 1) {
  var i, k, len, ref;
  COLORS = _.shuffle(COLORS);
  active = 0;
  balls = [];
  clicked = [];
  level += delta;
  console.log('reset', level);
  if (level < 1) {
    level = 1;
  }
  ref = range(level);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    createPair(COLORS[i]);
  }
  return console.log(balls);
};

createColors = function() {
  var b, g, k, l, len, len1, len2, m, r, result, values;
  result = [];
  //values = '0f' # 8=2*2*2
  values = '08f'; // 27=3*3*3
//values = '05af' # 64=4*4*4
  for (k = 0, len = values.length; k < len; k++) {
    r = values[k];
    for (l = 0, len1 = values.length; l < len1; l++) {
      g = values[l];
      for (m = 0, len2 = values.length; m < len2; m++) {
        b = values[m];
        result.push('#' + r + g + b); //+'8'
      }
    }
  }
  return result;
};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  COLORS = createColors();
  return reset(1);
};

draw = function() {
  var ball, i, k, l, len, len1, results;
  bg(0.5);
  for (k = 0, len = balls.length; k < len; k++) {
    ball = balls[k];
    ball.rita();
  }
  sw(0);
  fc(1);
  textSize(16);
  text(`level ${level}`, 100, 25);
  text(`active ${active}`, 100, 50);
  results = [];
  for (i = l = 0, len1 = balls.length; l < len1; i = ++l) {
    ball = balls[i];
    results.push(text(`${ball.x} ${ball.y} ${ball.col} ${ball.active}`, 100, 75 + i * 25));
  }
  return results;
};

mousePressed = function() {
  var ball, candidates;
  candidates = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = balls.length; k < len; k++) {
      ball = balls[k];
      if (ball.inside(mouseX, mouseY)) {
        results.push(ball);
      }
    }
    return results;
  })();
  if (candidates.length !== 1) {
    reset(-1);
    return;
  }
  active--;
  ball = candidates[0];
  ball.active = false;
  clicked.push(ball);
  console.log(`clicked.length ${clicked.length}`);
  if (clicked.length === 2) {
    if (active === 0) {
      reset(1);
      return;
    }
    if (clicked[0].col !== clicked[1].col) {
      reset(-1);
    }
    return clicked = [];
  }
};

overlap = function(x, y) {
  var ball, k, len;
  for (k = 0, len = balls.length; k < len; k++) {
    ball = balls[k];
    if (dist(ball.x, ball.y, x, y) < ball.radie) {
      return true;
    }
  }
  return false;
};

createPair = function(col) {
  var j, k, len, radie, ref, results, x, y;
  radie = int(windowWidth / (3 + level));
  ref = range(2);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    active++;
    x = int(random(width));
    y = int(random(height));
    while (overlap(x, y)) {
      x = int(random(width));
      y = int(random(height));
    }
    results.push(balls.push(new Ball(radie, x, y, col)));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7O0FBQUEsTUFBQSxHQUFTOztBQUNULEtBQUEsR0FBUTs7QUFDUixNQUFBLEdBQVM7O0FBQ1QsT0FBQSxHQUFVOztBQUVKLE9BQU4sTUFBQSxLQUFBO0VBQ0MsV0FBYyxPQUFBLElBQUEsSUFBQSxNQUFBLENBQUE7SUFBQyxJQUFDLENBQUE7SUFBTyxJQUFDLENBQUE7SUFBRyxJQUFDLENBQUE7SUFBRyxJQUFDLENBQUE7SUFDL0IsSUFBQyxDQUFBLE1BQUQsR0FBVTtFQURHOztFQUVkLElBQU8sQ0FBQSxDQUFBO0lBQ04sSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFSO0FBQW9CLGFBQXBCOztJQUNBLEVBQUEsQ0FBRyxDQUFIO0lBQ0EsRUFBQSxDQUFHLENBQUg7SUFDQSxJQUFBLENBQUssSUFBQyxDQUFBLEdBQU47V0FDQSxNQUFBLENBQU8sSUFBQyxDQUFBLENBQVIsRUFBVSxJQUFDLENBQUEsQ0FBWCxFQUFhLElBQUMsQ0FBQSxLQUFkO0VBTE07O0VBTVAsTUFBUyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQUE7SUFDUixJQUFHLENBQUksSUFBQyxDQUFBLE1BQVI7QUFBb0IsYUFBTyxNQUEzQjs7V0FDQSxJQUFBLENBQUssSUFBQyxDQUFBLENBQU4sRUFBUSxJQUFDLENBQUEsQ0FBVCxFQUFXLEVBQVgsRUFBYyxFQUFkLENBQUEsR0FBb0IsSUFBQyxDQUFBO0VBRmI7O0FBVFY7O0FBYUEsS0FBQSxHQUFROztBQUVSLEtBQUEsR0FBUSxRQUFBLENBQUMsUUFBUSxDQUFULENB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QUFKLENBQVMsS0FBVCxFQUFlLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIsR0FBbkIsQ0FBWDtFQVBELENBQUE7O0FBSFkiLCJzb3VyY2VzQ29udGVudCI6WyJDT0xPUlMgPSBudWxsXHJcbmxldmVsID0gMFxyXG5hY3RpdmUgPSAwXHJcbmNsaWNrZWQgPSBbXVxyXG5cclxuY2xhc3MgQmFsbFxyXG5cdGNvbnN0cnVjdG9yIDogKEByYWRpZSwgQHgsIEB5LCBAY29sKSAtPlxyXG5cdFx0QGFjdGl2ZSA9IHRydWVcclxuXHRyaXRhIDogLT5cclxuXHRcdGlmIG5vdCBAYWN0aXZlIHRoZW4gcmV0dXJuIFxyXG5cdFx0c2MgMVxyXG5cdFx0c3cgNFxyXG5cdFx0ZmlsbCBAY29sXHJcblx0XHRjaXJjbGUgQHgsQHksQHJhZGllXHJcblx0aW5zaWRlIDogKG14LG15KSAtPiBcclxuXHRcdGlmIG5vdCBAYWN0aXZlIHRoZW4gcmV0dXJuIGZhbHNlXHJcblx0XHRkaXN0KEB4LEB5LG14LG15KSA8IEByYWRpZVxyXG5cclxuYmFsbHMgPSBbXVxyXG5cclxucmVzZXQgPSAoZGVsdGEgPSAxKSAtPlxyXG5cdENPTE9SUyA9IF8uc2h1ZmZsZSBDT0xPUlNcclxuXHRhY3RpdmUgPSAwIFxyXG5cdGJhbGxzID0gW11cclxuXHRjbGlja2VkID0gW11cclxuXHRsZXZlbCArPSBkZWx0YVxyXG5cdGNvbnNvbGUubG9nICdyZXNldCcsbGV2ZWxcclxuXHRpZiBsZXZlbCA8IDEgdGhlbiBsZXZlbCA9IDFcclxuXHRmb3IgaSBpbiByYW5nZSBsZXZlbFxyXG5cdFx0Y3JlYXRlUGFpciBDT0xPUlNbaV1cclxuXHRjb25zb2xlLmxvZyBiYWxsc1xyXG5cclxuY3JlYXRlQ29sb3JzID0gLT5cclxuXHRyZXN1bHQgPSBbXVxyXG5cdCN2YWx1ZXMgPSAnMGYnICMgOD0yKjIqMlxyXG5cdHZhbHVlcyA9ICcwOGYnICMgMjc9MyozKjNcclxuXHQjdmFsdWVzID0gJzA1YWYnICMgNjQ9NCo0KjRcclxuXHRmb3IgciBpbiB2YWx1ZXNcclxuXHRcdGZvciBnIGluIHZhbHVlc1xyXG5cdFx0XHRmb3IgYiBpbiB2YWx1ZXNcclxuXHRcdFx0XHRyZXN1bHQucHVzaCAnIycrcitnK2IgIysnOCdcclxuXHRyZXN1bHRcclxuXHJcbnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0XHJcblx0Q09MT1JTID0gY3JlYXRlQ29sb3JzKClcclxuXHRyZXNldCAxXHJcblxyXG5kcmF3ID0gLT5cclxuXHRiZyAwLjVcclxuXHRmb3IgYmFsbCBpbiBiYWxsc1xyXG5cdFx0YmFsbC5yaXRhKClcclxuXHRzdyAwXHJcblx0ZmMgMVxyXG5cdHRleHRTaXplIDE2XHJcblx0dGV4dCBcImxldmVsICN7bGV2ZWx9XCIsIDEwMCwyNVxyXG5cdHRleHQgXCJhY3RpdmUgI3thY3RpdmV9XCIsIDEwMCw1MFxyXG5cdGZvciBiYWxsLGkgaW4gYmFsbHNcclxuXHRcdHRleHQgXCIje2JhbGwueH0gI3tiYWxsLnl9ICN7YmFsbC5jb2x9ICN7YmFsbC5hY3RpdmV9XCIsMTAwLDc1K2kqMjVcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+XHJcblx0Y2FuZGlkYXRlcyA9IChiYWxsIGZvciBiYWxsIGluIGJhbGxzIHdoZW4gYmFsbC5pbnNpZGUgbW91c2VYLG1vdXNlWSlcclxuXHRpZiBjYW5kaWRhdGVzLmxlbmd0aCAhPSAxIFxyXG5cdFx0cmVzZXQgLTFcclxuXHRcdHJldHVyblxyXG5cdGFjdGl2ZS0tXHJcblx0YmFsbCA9IGNhbmRpZGF0ZXNbMF1cclxuXHRiYWxsLmFjdGl2ZSA9IGZhbHNlXHJcblx0Y2xpY2tlZC5wdXNoIGJhbGxcclxuXHRjb25zb2xlLmxvZyBcImNsaWNrZWQubGVuZ3RoICN7Y2xpY2tlZC5sZW5ndGh9XCJcclxuXHRpZiBjbGlja2VkLmxlbmd0aCA9PSAyXHJcblx0XHRpZiBhY3RpdmUgPT0gMFxyXG5cdFx0XHRyZXNldCAxXHJcblx0XHRcdHJldHVyblxyXG5cdFx0aWYgY2xpY2tlZFswXS5jb2wgIT0gY2xpY2tlZFsxXS5jb2xcclxuXHRcdFx0cmVzZXQgLTFcclxuXHRcdGNsaWNrZWQgPSBbXVxyXG5cclxub3ZlcmxhcCA9ICh4LHkpIC0+XHJcblx0Zm9yIGJhbGwgaW4gYmFsbHMgXHJcblx0XHRpZiBkaXN0KGJhbGwueCxiYWxsLnkseCx5KSA8IGJhbGwucmFkaWUgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdGZhbHNlXHJcblxyXG5jcmVhdGVQYWlyID0gKGNvbCkgLT5cclxuXHRyYWRpZSA9IGludCB3aW5kb3dXaWR0aC8oMytsZXZlbClcclxuXHJcblx0Zm9yIGogaW4gcmFuZ2UgMlxyXG5cdFx0YWN0aXZlKytcclxuXHRcdHggPSBpbnQgcmFuZG9tIHdpZHRoXHJcblx0XHR5ID0gaW50IHJhbmRvbSBoZWlnaHRcclxuXHRcdHdoaWxlIG92ZXJsYXAgeCx5XHJcblx0XHRcdHggPSBpbnQgcmFuZG9tIHdpZHRoXHJcblx0XHRcdHkgPSBpbnQgcmFuZG9tIGhlaWdodFxyXG5cdFx0YmFsbHMucHVzaCBuZXcgQmFsbCByYWRpZSx4LHksY29sIl19
//# sourceURL=c:\github\ColorPairCD\coffee\sketch.coffee