// Generated by CoffeeScript 2.4.1
var Ball, COLORS, active, balls, clicked, createColors, createPair, draw, level, mousePressed, overlap, reset, setup;

COLORS = null;

level = 0;

active = 0;

balls = [];

clicked = [];

Ball = class Ball {
  constructor(radie1, x1, y1, col1) {
    this.radie = radie1;
    this.x = x1;
    this.y = y1;
    this.col = col1;
    this.active = true;
  }

  rita() {
    if (!this.active) {
      return;
    }
    sc(1);
    sw(4);
    fill(this.col);
    return circle(this.x, this.y, this.radie);
  }

  inside(mx, my) {
    if (!this.active) {
      return false;
    }
    return this.radie > dist(this.x, this.y, mx, my);
  }

};

reset = function(delta = 1) {
  var i, k, len, ref, results;
  COLORS = _.shuffle(COLORS);
  active = 0;
  balls = [];
  clicked = [];
  level += delta;
  if (level < 1) {
    level = 1;
  }
  ref = range(level);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    results.push(createPair(COLORS[i]));
  }
  return results;
};

createColors = function(pattern) {
  var b, g, r;
  return _.flatten((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = pattern.length; k < len; k++) {
      b = pattern[k];
      results.push((function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = pattern.length; l < len1; l++) {
          g = pattern[l];
          results1.push((function() {
            var len2, m, results2;
            results2 = [];
            for (m = 0, len2 = pattern.length; m < len2; m++) {
              r = pattern[m];
              results2.push('#' + r + g + b + '8');
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  })());
};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  COLORS = createColors('05af'); // 0f 08f 05af 58be 68ac
  return reset(1);
};

draw = function() {
  var ball, k, len, results;
  bg(0.5);
  results = [];
  for (k = 0, len = balls.length; k < len; k++) {
    ball = balls[k];
    results.push(ball.rita());
  }
  return results;
};

mousePressed = function() {
  var ball, candidates;
  candidates = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = balls.length; k < len; k++) {
      ball = balls[k];
      if (ball.inside(mouseX, mouseY)) {
        results.push(ball);
      }
    }
    return results;
  })();
  if (candidates.length !== 1) {
    return reset(-1);
  }
  active--;
  ball = candidates[0];
  ball.active = false;
  clicked.push(ball);
  if (clicked.length === 2) {
    if (active === 0) {
      return reset(1);
    }
    if (clicked[0].col !== clicked[1].col) {
      reset(-1);
    }
    return clicked = [];
  }
};

overlap = function(x, y) {
  var ball, k, len;
  for (k = 0, len = balls.length; k < len; k++) {
    ball = balls[k];
    if (0.5 * ball.radie > dist(ball.x, ball.y, x, y)) {
      return true;
    }
  }
  return false;
};

createPair = function(col) {
  var j, k, len, radie, ref, results, x, y;
  radie = int(1.5 * windowWidth / (3 + level));
  ref = range(2);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    active++;
    x = int(random(width));
    y = int(random(height));
    while (overlap(x, y)) {
      x = int(random(width));
      y = int(random(height));
    }
    results.push(balls.push(new Ball(radie, x, y, col)));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7O0FBQUEsTUFBQSxHQUFTOztBQUNULEtBQUEsR0FBUTs7QUFDUixNQUFBLEdBQVM7O0FBQ1QsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FBVTs7QUFFSixPQUFOLE1BQUEsS0FBQTtFQUNDLFdBQWMsT0FBQSxJQUFBLElBQUEsTUFBQSxDQUFBO0lBQUMsSUFBQyxDQUFBO0lBQU8sSUFBQyxDQUFBO0lBQUcsSUFBQyxDQUFBO0lBQUcsSUFBQyxDQUFBO0lBQVEsSUFBQyxDQUFBLE1BQUQsR0FBVTtFQUFwQzs7RUFDZCxJQUFPLENBQUEsQ0FBQTtJQUNOLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBUjtBQUFvQixhQUFwQjs7SUFDQSxFQUFBLENBQUcsQ0FBSDtJQUNBLEVBQUEsQ0FBRyxDQUFIO0lBQ0EsSUFBQSxDQUFLLElBQUMsQ0FBQSxHQUFOO1dBQ0EsTUFBQSxDQUFPLElBQUMsQ0FBQSxDQUFSLEVBQVUsSUFBQyxDQUFBLENBQVgsRUFBYSxJQUFDLENBQUEsS0FBZDtFQUxNOztFQU1QLE1BQVMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFBO0lBQ1IsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFSO0FBQW9CLGFBQU8sTUFBM0I7O1dBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFBLENBQUssSUFBQyxDQUFBLENBQU4sRUFBUSxJQUFDLENBQUEsQ0FBVCxFQUFXLEVBQVgsRUFBYyxFQUFkO0VBRkQ7O0FBUlY7O0FBWUEsS0FBQSxHQUFRLFFBQUEsQ0FBQyxRQUFRLENBQVQsQ0FB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QUFBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxNQUFBO0lBQ0EsQ0FBQSxHQUFJLEdBQUEsQ0FBSSxNQUFBLENBQU8sS0FBUCxDQUFKO0lBQ0osQ0FBQSxHQUFJLEdBQUEsQ0FBSSxNQUFBLENBQU8sTUFBUCxDQUFKO0FBQ0osV0FBTSxPQUFBLENBQVEsQ0FBUixFQUFVLENBQVYsQ0FBTjtNQUNDLENBQUEsR0FBSSxHQUFBLENBQUksTUFBQSxDQUFPLEtBQVAsQ0FBSjtNQUNKLENBQUEsR0FBSSxHQUFBLENBQUksTUFBQSxDQUFPLE1BQVAsQ0FBSjtJQUZMO2lCQUdBLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxJQUFKLENBQVMsS0FBVCxFQUFlLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIsR0FBbkIsQ0FBWDtFQVBELENBQUE7O0FBRlkiLCJzb3VyY2VzQ29udGVudCI6WyJDT0xPUlMgPSBudWxsXHJcbmxldmVsID0gMFxyXG5hY3RpdmUgPSAwXHJcbmJhbGxzID0gW11cclxuY2xpY2tlZCA9IFtdXHJcblxyXG5jbGFzcyBCYWxsXHJcblx0Y29uc3RydWN0b3IgOiAoQHJhZGllLCBAeCwgQHksIEBjb2wpIC0+IEBhY3RpdmUgPSB0cnVlXHJcblx0cml0YSA6IC0+XHJcblx0XHRpZiBub3QgQGFjdGl2ZSB0aGVuIHJldHVybiBcclxuXHRcdHNjIDFcclxuXHRcdHN3IDRcclxuXHRcdGZpbGwgQGNvbFxyXG5cdFx0Y2lyY2xlIEB4LEB5LEByYWRpZVxyXG5cdGluc2lkZSA6IChteCxteSkgLT4gXHJcblx0XHRpZiBub3QgQGFjdGl2ZSB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0QHJhZGllID4gZGlzdCBAeCxAeSxteCxteVxyXG5cclxucmVzZXQgPSAoZGVsdGEgPSAxKSAtPlxyXG5cdENPTE9SUyA9IF8uc2h1ZmZsZSBDT0xPUlNcclxuXHRhY3RpdmUgPSAwIFxyXG5cdGJhbGxzID0gW11cclxuXHRjbGlja2VkID0gW11cclxuXHRsZXZlbCArPSBkZWx0YVxyXG5cdGlmIGxldmVsIDwgMSB0aGVuIGxldmVsID0gMVxyXG5cdGZvciBpIGluIHJhbmdlIGxldmVsXHJcblx0XHRjcmVhdGVQYWlyIENPTE9SU1tpXVxyXG5cclxuY3JlYXRlQ29sb3JzID0gKHBhdHRlcm4pIC0+IF8uZmxhdHRlbiAoJyMnK3IrZytiKyc4JyBmb3IgciBpbiBwYXR0ZXJuIGZvciBnIGluIHBhdHRlcm4gZm9yIGIgaW4gcGF0dGVybilcclxuXHJcbnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0XHJcblx0Q09MT1JTID0gY3JlYXRlQ29sb3JzICcwNWFmJyAjIDBmIDA4ZiAwNWFmIDU4YmUgNjhhY1xyXG5cdHJlc2V0IDFcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGJnIDAuNVxyXG5cdGZvciBiYWxsIGluIGJhbGxzXHJcblx0XHRiYWxsLnJpdGEoKVxyXG5cclxubW91c2VQcmVzc2VkID0gLT5cclxuXHRjYW5kaWRhdGVzID0gKGJhbGwgZm9yIGJhbGwgaW4gYmFsbHMgd2hlbiBiYWxsLmluc2lkZSBtb3VzZVgsbW91c2VZKVxyXG5cdGlmIGNhbmRpZGF0ZXMubGVuZ3RoICE9IDEgdGhlbiByZXR1cm4gcmVzZXQgLTFcclxuXHRhY3RpdmUtLVxyXG5cdGJhbGwgPSBjYW5kaWRhdGVzWzBdXHJcblx0YmFsbC5hY3RpdmUgPSBmYWxzZVxyXG5cdGNsaWNrZWQucHVzaCBiYWxsXHJcblx0aWYgY2xpY2tlZC5sZW5ndGggPT0gMlxyXG5cdFx0aWYgYWN0aXZlID09IDAgdGhlbiByZXR1cm4gcmVzZXQgMVxyXG5cdFx0aWYgY2xpY2tlZFswXS5jb2wgIT0gY2xpY2tlZFsxXS5jb2wgdGhlbiByZXNldCAtMVxyXG5cdFx0Y2xpY2tlZCA9IFtdXHJcblxyXG5vdmVybGFwID0gKHgseSkgLT5cclxuXHRmb3IgYmFsbCBpbiBiYWxscyBcclxuXHRcdGlmIDAuNSAqIGJhbGwucmFkaWUgPiBkaXN0IGJhbGwueCxiYWxsLnkseCx5IHRoZW4gcmV0dXJuIHRydWVcclxuXHRmYWxzZVxyXG5cclxuY3JlYXRlUGFpciA9IChjb2wpIC0+XHJcblx0cmFkaWUgPSBpbnQgMS41ICogd2luZG93V2lkdGgvKDMrbGV2ZWwpXHJcblx0Zm9yIGogaW4gcmFuZ2UgMlxyXG5cdFx0YWN0aXZlKytcclxuXHRcdHggPSBpbnQgcmFuZG9tIHdpZHRoXHJcblx0XHR5ID0gaW50IHJhbmRvbSBoZWlnaHRcclxuXHRcdHdoaWxlIG92ZXJsYXAgeCx5XHJcblx0XHRcdHggPSBpbnQgcmFuZG9tIHdpZHRoXHJcblx0XHRcdHkgPSBpbnQgcmFuZG9tIGhlaWdodFxyXG5cdFx0YmFsbHMucHVzaCBuZXcgQmFsbCByYWRpZSx4LHksY29sIl19
//# sourceURL=c:\github\ColorPairCD\coffee\sketch.coffee